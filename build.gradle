buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

repositories {
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url "https://maven.tterrag.com/"
    }
    maven { // CURIOS
        url "https://maven.theillusivec4.top/"
    }
    maven {
        url 'https://www.dogforce-games.com/maven/'
    }
    maven {
        url "https://www.cursemaven.com"
    }
    mavenLocal()
}

version = "1.17.3"
group = "dev.gigaherz.toolbelt"
archivesBaseName = "ToolBelt-UNKNOWN"

project.afterEvaluate {
    archivesBaseName = "ToolBelt-${project.MC_VERSION}"
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '16' // Need this here so eclipse task generates correctly.

sourceSets {
    main.resources.srcDirs += 'src/main/generated_resources'
}

minecraft {
    mappings channel: 'official', version: '1.17.1'
    //mappings channel: 'snapshot', version: '20210309-1.16.5'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            property 'legacyClassPath', '{minecraft_classpath}'

            ideaModule "${project.name}.main"

            mods {
                thismod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            ideaModule "${project.name}.main"

            mods {
                thismod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'toolbelt', '--all', '--output', file('src/main/generated_resources/'), '--existing', file('src/main/resources/')

            mods {
                thismod {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    runtimeMod { transitive = false }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.32'

    compileOnly fg.deobf("dev.gigaherz.sewingkit:SewingKit-mc1171:1.4.1.5")
    runtimeOnly fg.deobf("dev.gigaherz.sewingkit:SewingKit-mc1171:1.4.1.5")

    //compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.110:api")
    //runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.110")

    //runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.17.1-5.0.0.0")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.17.1-5.0.0.0")
    runtimeMod fg.deobf("top.theillusivec4.curios:curios-forge:1.17.1-5.0.0.0")

    // 2.1.1
    //runtimeOnly fg.deobf("curse.maven:curious-armor-stands-398784:3343340")

    implementation('cpw.mods:securejarhandler') { version { strictly '0.9.45' } }
}

project.afterEvaluate {
    task copyMods(type:Copy) {
        from configurations.runtimeMod.files
        into file("run/mods")
    }
    tasks.forEach {
        if (it.name.startsWith("prepareRun"))
            it.dependsOn copyMods
    }
}

jar {
    from('/') {
        include 'LICENSE.txt'
    }

    manifest {
        attributes([
                "Specification-Title": "toolbelt",
                "Specification-Vendor": "gigaherz",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"gigaherz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
